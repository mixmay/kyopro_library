struct Edge {
  ll to, cost, index;
  Edge(int to, int cost, int index):
    to(to), cost(cost), index(index) {}
};

using Graph = vector<vector<Edge>>;
//fromは頂点iに到達するときに採用した辺のindex、distは頂点iまでの最小コスト
vl from,dist;
void Dijkstra(Graph g, int s){
    int n = g.size();
    from.resize(n,-1);
    dist.resize(n,LINF);

    min_priority_queue<pll> mpq;
    mpq.emplace(0,s);
    dist[s] = 0;
    from[s] = s;
    while(mpq.size()){
        ll d,v;
        tie(d,v)= mpq.top();mpq.pop();
        if(dist[v] != d) continue;
        for(auto e: g[v]){
            ll u=e.to,cost=e.cost,id=e.index;
            ll nd = d + cost;
            if(dist[u] <= nd) continue;
            dist[u] = nd;
            from[u] = id;
            mpq.emplace(nd,u);
        }
    }
}
